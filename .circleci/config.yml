orbs:
  docker: circleci/docker@2.2.0
version: 2.1

commands:
  dependencies:
    steps:
      - run:
          name: Installing necessary packages
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common
      - run:
          name: Installing ansible
          command: |
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible

  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: "string"
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name finalProject-<< parameters.workflow_id >>
            
executors:
  docker-publisher: 
    environment:
      IMAGE_NAME: kojokobi/app
    docker: 
      - image: cimg/base:2021.04
        auth:
            username: $DOCKERHUB_USERNAME
            password: $DOCKERHUB_PASSWORD


jobs:
    lint-dockerfile:
      executor: docker/hadolint
      steps:
        - checkout
        - docker/hadolint:
            dockerfiles: ./Dockerfile
  
    build-dockerfile:
      executor: docker/machine
      steps:
        - checkout
        - docker/build:
            image: finalproject-img
            treat-warnings-as-errors: true

    publishLatestToHub: 
      executor: docker-publisher
      steps: 
        - checkout
        - setup_remote_docker
        - run: 
            name: Publish Docker Image to Docker Hub
            command: |
              echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
              docker build -t $IMAGE_NAME .
              docker push $IMAGE_NAME:v1

    create-ec2-instance:
      docker:
        - image: cimg/aws:2023.01
      steps:
        - checkout
        # - dependencies
        - run:
            name: create microk8s ec2 instance
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/finalProject-ec2.yml \
                --stack-name "finalProject-${CIRCLE_WORKFLOW_ID:0:7}" \
                --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
                --region us-east-1 \
                --tags project=finalProject

        - run:
            name: Add back-end ip to ansible inventory
            command: |
              aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt

        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt

    configure_infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["df:83:e0:88:9c:f0:43:f7:cb:da:a9:0c:79:5c:7d:9e"]
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies  
            command: |
              apk add curl
              apk add --upgrade bash
              apk add --update ansible
              apk add openssh-client
              pip3 install awscli
        - run:
            name: Configure server
            command: |
              cat ~/project/.circleci/ansible/inventory.txt
              export ANSIBLE_HOST_KEY_CHECKING=False
              ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/main.yml
              
        - destroy_environment
        
        


workflows:
  build-master:
    jobs:
       - lint-dockerfile
       - build-dockerfile:
          requires:
            - lint-dockerfile
       - publishLatestToHub:
          requires:
            - build-dockerfile
       - create-ec2-instance:
          requires:
            - publishLatestToHub
       - configure_infrastructure:
          requires:
            - create-ec2-instance

